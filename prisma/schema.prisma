// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RAM {
  id        Int     @id @default(autoincrement())
  brand     String  
  capacity  Int
  pc        PCOnRAM[]
}

model MB {
  id        Int     @id @default(autoincrement())
  brand     String  
  pc        PC[]
}

model PC {
  id        Int     @id @default(autoincrement())
  ram       PCOnRAM[]
  mb        MB      @relation(fields: [mbId], references: [id])
  mbId      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PCOnRAM {
  pcId  Int
  ramId Int

  pc    PC   @relation(fields: [pcId], references: [id], onDelete: Cascade)
  ram   RAM  @relation(fields: [ramId], references: [id], onDelete: Cascade)

  @@id([pcId, ramId]) // Cl√© primaire composite
}
